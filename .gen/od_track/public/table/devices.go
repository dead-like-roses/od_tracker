//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Devices = newDevicesTable("public", "devices", "")

type devicesTable struct {
	postgres.Table

	// Columns
	DeviceID postgres.ColumnString
	Name     postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type DevicesTable struct {
	devicesTable

	EXCLUDED devicesTable
}

// AS creates new DevicesTable with assigned alias
func (a DevicesTable) AS(alias string) *DevicesTable {
	return newDevicesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new DevicesTable with assigned schema name
func (a DevicesTable) FromSchema(schemaName string) *DevicesTable {
	return newDevicesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new DevicesTable with assigned table prefix
func (a DevicesTable) WithPrefix(prefix string) *DevicesTable {
	return newDevicesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new DevicesTable with assigned table suffix
func (a DevicesTable) WithSuffix(suffix string) *DevicesTable {
	return newDevicesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newDevicesTable(schemaName, tableName, alias string) *DevicesTable {
	return &DevicesTable{
		devicesTable: newDevicesTableImpl(schemaName, tableName, alias),
		EXCLUDED:     newDevicesTableImpl("", "excluded", ""),
	}
}

func newDevicesTableImpl(schemaName, tableName, alias string) devicesTable {
	var (
		DeviceIDColumn = postgres.StringColumn("device_id")
		NameColumn     = postgres.StringColumn("name")
		allColumns     = postgres.ColumnList{DeviceIDColumn, NameColumn}
		mutableColumns = postgres.ColumnList{NameColumn}
	)

	return devicesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		DeviceID: DeviceIDColumn,
		Name:     NameColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
